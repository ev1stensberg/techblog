<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[TeliaSonera TechBlog]]></title><description><![CDATA[TeliaSonera TechBlog]]></description><link>http://teliasonera.github.io</link><generator>metalsmith-feed</generator><lastBuildDate>Thu, 21 Jul 2016 10:40:11 GMT</lastBuildDate><atom:link href="http://teliasonera.github.io/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Today we write the legacy code of tomorrow]]></title><description><![CDATA[<p>Our code is a mess. And that is the way it should be.</p>
<p>No matter how good code we write today, it will need to be fixed tomorrow. Our understanding of the business domain evolves, the business processes and needs themselves evolve, the technical tools (language, framework, libraries) and non-functional requirements evolve. Thus our code will inevitably become outdated.</p>
<p><em>A part of the <a href="/tags/nettbutikk">series Nettbutikk Team&#39;s Experiences and Experiments</a></em></p>
<p>For the purpose of this post, contrary to <a href="https://theholyjava.wordpress.com/2011/04/18/what-do-i-mean-by-a-legacy-code/">other popular definitions</a>, I define <em>legacy code</em> as <em>code that we would have written differently today (and might thus need to update)</em>. The main point is that code is a like a living system: either it evolves - or it rots. You have to constantly come back to the old code and - much more importantly - old design and update it to keep up to date with the current needs and ways of doing things. Otherwise the code base becomes so much of a mess, that it will be really hard to change.</p>
<p>In an ideal world, we would always keep all the code and designs up to date. In a real world, that is not possible. Our resources are limited and we need to maintain a dynamic balance (swaying once more on the one then the other side) between the business needs to keep (future) changes quick and cheap (maintainability, adaptability) and keeping up to date with the market (implementing fixed-date changes, adding new functionality). If you need wood to survive the winter, you can&#39;t spend the whole autumn sharpening your axe - but without sharpening it, you won&#39;t be able to cut enough trees.</p>
<h3 id="examples-from-our-webshop">Examples from our webshop</h3>
<p>There are quite a few things that have become outdated and we are improving or plan to improve eventually:</p>
<ul>
<li>We have a hack featuring a &quot;fake phone&quot; to enable customers to buy only a SIM card because the original design assumed that the customer will always be buying a phone and we needed to add support for this quickly</li>
<li>The data that we pass to the frontend is difficult to use (we need multiple lookups and data combination to show the UI)</li>
<li>The logging and error reporting code became too complex. We need a new, simple API tailored to our needs.</li>
<li>The same thing has different name in different contexts (e.g. &quot;phone&quot;, &quot;phoneNumber&quot;, &quot;number&quot;).</li>
<li>We use a dead React Flux library</li>
<li>We have a mix of ES5 and ES6 code</li>
<li>We have a mix of old and new style of React components</li>
<li>We have a few ways of passing data to React components - using props, fetching them from the Store, ... - not one unified way (as our understanding of the best way to do this in our context has evolved a lot)</li>
<li>Etc. etc. etc.</li>
</ul>
<p>Fortunately there are also many things that we have already improved. As always, this is an ongoing process.</p>
<h3 id="conclusion">Conclusion</h3>
<p>No matter what you do, parts of your code will &quot;rot&quot; and get outdated while you are trying to keep up with the always changing environment. That is inevitable. You don&#39;t have the infinite resources necessary to prevent it - but you can (and must) use some time to keep the rot in check and to fight it back. Accept that it will happen, don&#39;t get too in love with your code since you will eventually need to change or replace it anyway, and try to maintain a good, ever-shifting balance between new development and updating the existing code and design.</p>
]]></description><link>http://teliasonera.github.io/blog/today-we-write-the-legacy-code-of-tomorrow</link><guid isPermaLink="true">http://teliasonera.github.io/blog/today-we-write-the-legacy-code-of-tomorrow</guid><dc:creator><![CDATA[Jakub Holý]]></dc:creator><pubDate>Wed, 20 Jul 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Why we practice fronted-first design (instead of API-first)]]></title><description><![CDATA[<p>Alex has introduced us to the idea of front-end first design: You start by creating the front-end (browser) code. As you discover data or API calls that you need, you mock them. When the UI stabilizes, you use the mocked APIs and data to create the backend with exactly the functionality and exactly the data needed by the UI. The end result is a simpler application.</p>
<p><em>A part of the <a href="/tags/nettbutikk">series Nettbutikk Team&#39;s Experiences and Experiments</a></em></p>
<p>We are trying to adopt this as our approach because it is so sensible. Whenever we work with an API that wasn’t designed with the actual client needs in mind, we experience unnecessary friction and have to do various workarounds and adaptations so front-end-first absolutely makes sense to us. (E.g. when working with a REST API designed in line with REST principles – but not with our needs, resulting in a too chatty communication and more complex code.)</p>
<p>Of course there are same limitations. It is more challenging when you need to support different clients. And you need to take into account not just what the UI wants but also what is reasonably possible in the constraints of the existing system. You want to avoid a big gap between the two – we still remember the pain of integrating OOP and relational databases and the complexity of pitfalls of Object-Relational Mappers such as Hibernate, that try to bridge the two.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Fronted-first design rocks (for us). Try it too and see whether you too get a simpler application code and shorter time to market.</p>
]]></description><link>http://teliasonera.github.io/blog/why-we-practice-fronted-first-design-instead-of-api-first</link><guid isPermaLink="true">http://teliasonera.github.io/blog/why-we-practice-fronted-first-design-instead-of-api-first</guid><dc:creator><![CDATA[Jakub Holý]]></dc:creator><pubDate>Sat, 05 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Moving Too Fast For UX? Genuine Needs, Wrong Solutions]]></title><description><![CDATA[<p>Our UX designer and interaction specialist – a wonderful guy – has shocked us today by
telling us that we (the developers) are moving too fast. He needs more time to do
proper user experience and interface design – talk to real users, collect feedback,
design based on data, not just hypotheses and gut feeling. To do this, he needs us
to slow down.</p>
<p><em>A part of the <a href="/tags/nettbutikk">series Nettbutikk Team&#39;s Experiences and Experiments</a></em></p>
<p>We see a common human &quot;mistake&quot; here: where the expression of a genuine need gets mixed in with a suggestion for satisfying it. We are happy to learn about the need and will do our best to satisfy it (after all, we want everybody to be happy, and we too love
evidence-based design) but we want to challenge the proposed solution. There is never
just one way to satisfy a need – and the first proposed solution is rarely the best one (not mentioning that this particular one goes against the needs of us, the developers).</p>
<p>So after some thought we proposed a better solution for satisfying the &quot;better UX&quot;
need: our rewrite of the current system will simply copy the design of the existing
system, and we will change it later on, when UX is ready to start experimenting with a new design. Thus we can get feedback on technical aspects of the new solution
(performance, etc.) soon, while the UX-team designs a solution based on thorough user
insight and data.</p>
<p>Do you also experience that people mix needs and (suboptimal) solution proposals?
Perhaps you do it yourself?</p>
]]></description><link>http://teliasonera.github.io/blog/moving-too-fast-for-ux-genuine-needs-wrong-solutions</link><guid isPermaLink="true">http://teliasonera.github.io/blog/moving-too-fast-for-ux-genuine-needs-wrong-solutions</guid><dc:creator><![CDATA[Jakub Holý]]></dc:creator><pubDate>Thu, 12 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Extreme Minimalism - replacing shop.netcom.no one tiny bit at a time (Smidig 2015 transcript)]]></title><description><![CDATA[<p>Replacing legacy systems typically starts with an excitement, proceeds through
months or years of work, and results in a failure. The incremental strangling
of the old shop.netcom.no is a very different story and the approach is
rightfully called &quot;extreme&quot; by the rest of the organization. Read on to learn how
we have been replacing the legacy webshop one tiny bit at a time. I also hope
to share my continual amazement at how much work can be postponed to be able to
deliver a &quot;feature&quot; early.</p>
<p><em>A part of the <a href="/tags/nettbutikk">series Nettbutikk Team&#39;s Experiences and Experiments</a></em></p>
<p>(<a href="https://vimeo.com/145011983">See Extreme minimalism: Replacing shop.netcom one tiny bit at a time at Vimeo</a> (10 min).)</p>
<h2 id="my-best-project-ever">My best ‘project’ ever</h2>
<p>Nettbutikk.netcom.no is the best project - though I rather say product development -
I have ever been to. When asked why, this was my answer:</p>
<blockquote>
<p>Full stack &amp; full control: frontend, backend, ops. Great people &amp; ideally
small team. Very pragmatic, minimalistic and evolutionary approach to the dev
process. Working closely with the business and seeing the app actually matters
to them and influences real people every day.</p>
</blockquote>
<p>I.e.</p>
<ol>
<li>We do everything - front-end, back-end, operations, we deploy whenever we want to.</li>
<li>The team is really small and totally awesome</li>
<li>We sit together with the business and work together all the time</li>
<li>The application is really important for the business - and every line of code
I release to production can improve (or destroy) the experiences for thousands
of people.</li>
</ol>
<p>There are many things I am excited about in this project but today I want to focus on one thing.</p>
<p>Normally when people speak about their favourite project, they brag about what
they did. I want to brag about what we have not done.</p>
<h2 id="background-extreme-minimalism-mind-set">Background: Extreme Minimalism Mind-set</h2>
<p>One of the great things about this team is its minimalist mind-set:</p>
<ol>
<li>We get by with the minimal process possible, and continually evolve it,
add and (preferably) remove from it as we learn and our needs change. No Jira,
no demos (the business sees every new change anyway), no retrospectives (we
practice continuous improvement), ...</li>
<li>We are library and tool skeptics (thanks, Alex!) - we only add a it if we
really need to, if skipping it or writing it ourselves isn’t reasonable</li>
<li>We always try to trim a feature down to the bare minimum and release the
smallest possible chunk of functionality that adds any value to us,
the business, or our customers &lt;--- this is what I will focus on today</li>
</ol>
<h2 id="the-goal-of-nettbutikk-netcom-no">The goal of nettbutikk.netcom.no</h2>
<p>NetCom had - or actually has - this huge, inflexible webshop rented from a 3rd
party and customized. But the business wanted something different, something
that would actually fit their needs, evolve continuously, enable them to experiment.
Something where the time from an idea to production wouldn&#39;t be months but days
or hours.</p>
<p>So they have decided to get a few skilled developers, having them sitting together
with the business (instead of being outsourced) and writing their own webshop.</p>
<p>To me this sounds very scary. As far as I know, most of the &quot;let’s ditch this
non-trivial software and write it from scratch&quot; projects fail badly.</p>
<p>And when you think about it, you need a lot to implement a webshop:</p>
<p><img src="../../images/extreme_minimalism-webshop_needs.png" alt="webshop_needs"></p>
<ul>
<li>You obviously need a database</li>
<li>Get data from primary sources and transform the for the views</li>
<li>Enhance / override the primary data</li>
<li>Product listing (for all product types)</li>
<li>Product details page (for all product types)</li>
<li>Checkout, payment</li>
<li>Filtering, search, categories</li>
<li>Analytics</li>
<li>user login</li>
<li>(and certainly many things I have forgotten)</li>
</ul>
<p>This sounds like at least 1 year project with a big-bang release at the end.
You cannot release half of a webshop, right? You can’t release a perfect webshop
without checkout, where people can’t actually buy stuff.</p>
<h2 id="our-first-release-">Our first release:</h2>
<p><strong>Product details page of a single product variant</strong></p>
<p>Well, our first release was a single page - product details of one variant of
one product. We have released it in just a few weeks (though more than the two
I hoped for).</p>
<h2 id="here-it-is-">Here it is:</h2>
<p><img src="../../images/extreme_minimalism-nettbutik_r1-page1.png" alt="release 1 page 1"></p>
<p>So you would navigate the old shop and when you clicked on iPhone 6 plus 16GB,
you would come to our page. You could select a color, subscription, ...</p>
<p><img src="../../images/extreme_minimalism-nettbutik_r1-page2.png" alt="release 1 page 2"></p>
<p>... services and accessories. And when you clicked on the &quot;Fortsett&quot; button, you
would go to checkout in the old shop again. And even the &quot;shopping cart&quot; - the
configuration of your order - would mostly just reuse the shopping cart in the
old shop via an ugly iframe hack.</p>
<h2 id="so-there-is-a-lot-we-did-not-need-to-do-">So there is a lot we did not need to do:</h2>
<p><img src="../../images/extreme_minimalism-webshop-not_done.png" alt="webshop-not_done"></p>
<p>Later, we extended it to all variants, all iPhones, eventually all phones,
phone listing, all product types, ... .</p>
<p>Nowadays, 10 months since start, we have everything, only the checkout still
lives in the old system. (And we are looking forward to getting rid of it as well!)</p>
<h2 id="the-four-techniques">The Four Techniques</h2>
<p>How do we do it? How do we trim the next chunk of functionality to the total minimum? We
apply these techniques:</p>
<p><strong>You Don’t Need It Just Yet. Postpone it!</strong></p>
<ol>
<li>Do it manually</li>
<li>Hardcode it</li>
<li>Reuse</li>
<li>Slice &amp; Dice</li>
</ol>
<p>The key principle is &quot;You Don’t Need It Just Yet&quot;. There is a lot you truly need,
but most likely it can wait a day - or a few weeks
(and you can hardcode it or do it manually in the meantime).
The magic words &quot;in the first phase [or day]&quot; (and, possibly, &quot;experiment&quot;) can
help you to get this across to the business people that are always eager to get
more cool stuff out. (And, of course, by doing less now we get eventually more done!)</p>
<p>It is also very important to remember - and to communicate to the business - that
you only need not to be worse than the existing functionality - improvements,
bug fixes, and additions may wait. (Even though we more less managed to follow
this maxim, everything we did is better and performs better than in the old shop :-) .)</p>
<ol>
<li>Do it manually - you can get shockingly far with doing things manually.
During many months, our heroic biz people duplicated data between the old and
new webshop instead of automatically syncing them. And we still need to add
new phones manually to the webshop.</li>
<li>Hardcode it - with just a few minutes to deploy, the developers sitting with
the business, and possibly only a small subset of
products, a lot may be hard-coded instead of having a CMS to add/override data.
These days, when we need to show &quot;Checkout down for maintenance,&quot; we still just
change it in code, release, and then re-deploy the previous version.</li>
<li>Reuse what is there, even though it certainly gets ugly quickly. We have
reused the shopping cart via an iframe and still use the checkout process in the
old shop.</li>
<li>Slice &amp; Dice: Release the smallest subset of the feature for just one use
case / target group first. We have started with a page for a single product
variant - which decreased the complexity considerably. And when developing a new
cart functionality, we applied it first just to accessories - and only the part
users cannot see in the UI (though they use it).</li>
</ol>
<p>I am constantly surprised how far we can get with these.
It works best when having colleagues that challenge you on doing even less, on
hardcoding and doing manually a little more than you would want to. (We are
developers after all, we love automation!)</p>
<h2 id="always-ask-">Always ask:</h2>
<p><strong>Do I need it <em>now</em>?</strong></p>
<p>(Hint: Most of the time the answer is no.)</p>
<h2 id="want-to-know-more-">Want to know more?</h2>
<ul>
<li><a href="https://netcom.no/disrupt-us">Work with me!</a></li>
<li>Contanct me at Twitter <a href="https://twitter.com/HolyJak">@HolyJak</a></li>
<li>Learn more about our journey at the <a href="teliasonera.github.io/tech-blog/">TeliaSonera Tech Blog</a></li>
</ul>
<p>Thank you!</p>
]]></description><link>http://teliasonera.github.io/blog/extreme-minimalism-replacing-shop-netcom-no-one-tiny-bit-at-a-time-smidig-2015-transcript</link><guid isPermaLink="true">http://teliasonera.github.io/blog/extreme-minimalism-replacing-shop-netcom-no-one-tiny-bit-at-a-time-smidig-2015-transcript</guid><dc:creator><![CDATA[Jakub Holý]]></dc:creator><pubDate>Tue, 03 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introducing the Series Nettbutikk Team's Experiences and Experiments]]></title><description><![CDATA[<p><em>A part of the <a href="/tags/nettbutikk">series Nettbutikk Team&#39;s Experiences and Experiments</a></em></p>
<p>We are starting a new blog series tracking the experiences and (process)
experiments of the team behind <a href="https://nettbutikk.netcom.no">nettbutikk.netcom.no</a>.
This is the best product development process and team I have ever part of and
it has been called &quot;extreme&quot; for a couple of reasons. We are quite excited about it
and would like to share our experiences, successes, and failures for the amusement
and inspiration of our readers.</p>
<p>When asked why we think this team and product development were so great, this
was my answer:</p>
<blockquote>
<p>Full stack &amp; full control: frontend, backend, ops. Great people &amp; ideally
small team. Very pragmatic, minimalistic and evolutionary approach to the
dev process. Working closely with the business and seeing that the app actually
matters to them and influences real people every day.</p>
</blockquote>
<h2 id="what-is-the-project-about-">What is the project about?</h2>
<p>The project started as an experiment. It grew out of the pain with the old
huge and inflexible webshop rented from a third party. The business wanted
something that would fit their needs, that could evolve, and enable them to experiment.
Something, where the time from an idea to production would be days or hours, not
months.</p>
<p>So they decided to get a small team of highly skilled developers, sitting
and working together with the business, and write their own, better webshop.
The hypothesis was that even with expensive skilled Norwegian developers, it
would pay off thanks to more satisfied customers that would more easily find
what they wanted.</p>
<h2 id="why-is-it-considered-extreme-">Why is it considered &quot;extreme&quot;?</h2>
<p>There are multiple things considered &quot;extreme&quot; about this team. We have released to
production, to real customers, only in a few weeks, including just a single
product page. We deploy whenever we want to, and do our own operations, using
the cloud instead of the enterprise infrastructure. Our development process is
minimalistic, we don&#39;t follow a methodology, we create (and re-create) our own,
using only a physical Kanban board instead of Jira. And we run on Node.js instead
of the standard JVM. We have ditched e-mail and started using Slack instead.</p>
<h2 id="a-little-of-history">A little of history</h2>
<p>The project started in February 2015 as an experiment. The first release - a
single page for one variant of one phone - came after 7 weeks (though the
optimists hoped for 2). Then it steadily grew and a month ahead of the planned
experiment end it was deemed successful. By summer, the whole webshop with the
exception of checkout was in the new system, and it was better and more
performant then the old one. That enabled a large re-design for a summer campaign.
The business started with A/B experiments and there was a steady flow of new
features and improvements, with focus shifting gradually towards implementing
checkout directly in the new webshop. When the newest iPhone arrived, the system
handled the increased load formidably (contrary to some backend systems, sadly).</p>
<h2 id="meet-the-team">Meet the team</h2>
<p>The core team that started the journey consists of:</p>
<ul>
<li>Alex York, master of all things CSS and JS with a .NET background, love of TDD,
  and ultimate judge of code quality and understandability</li>
<li>Jakob Lind, the get-things-done guy, an Emacs and functional programming enthusiast,
  always on lookout for better ways to do things</li>
<li>Jakub Holý, the operations and data specialist and Clojre(Script) evangelist</li>
<li>Ketil Jensen, our &quot;agile coach,&quot; and a shield and liaison between us and the rest of the organization</li>
<li>Magnus Indregard, our primary business representative</li>
</ul>
<p>All of the developers are very capable, they all are very pragmatic and favour
the lean way. Yet they have different background and approaches. The similarities
give us a strong push towards minimalism and getting stuff out, while the
differences spark valuable discussions and lead to a much better process and code.</p>
]]></description><link>http://teliasonera.github.io/blog/introducing-the-series-nettbutikk-team-s-experiences-and-experiments</link><guid isPermaLink="true">http://teliasonera.github.io/blog/introducing-the-series-nettbutikk-team-s-experiences-and-experiments</guid><dc:creator><![CDATA[Jakub Holý]]></dc:creator><pubDate>Sun, 01 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Nettbutikk: The No Status Standup Experiment]]></title><description><![CDATA[<p><em>A part of the <a href="/tags/nettbutikk">series Nettbutikk Team&#39;s Experiences and Experiments</a></em></p>
<p>The Nettbutikk team likes to challenge all established truths. Jakob Lind has
come with with an excellent question: do we need standups? Do we all need to
stand in front of our Kanban board and discuss what was and will be, especially
since we often already know that, thanks to communication all the time?</p>
<p>We have agreed to keep the standups but to limit them to:</p>
<ol>
<li>A brief review of what has been deployed to production the previous day</li>
<li>Any blockers, problems, and requests for help</li>
</ol>
<p>i.e. skipping the reporting of the status of tasks if they progress &quot;according
to the plan&quot; and there is nothing noteworthy about them. Of course participants
can ask, if they want to know. And they should do so, if they e.g. feel a task is
taking too long.</p>
<p>Minimalism for the win!</p>
]]></description><link>http://teliasonera.github.io/blog/nettbutikk-the-no-status-standup-experiment</link><guid isPermaLink="true">http://teliasonera.github.io/blog/nettbutikk-the-no-status-standup-experiment</guid><dc:creator><![CDATA[Jakub Holý]]></dc:creator><pubDate>Sun, 01 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Upgrade or not to upgrade? The eternal dilemma]]></title><description><![CDATA[<p><em>A part of the <a href="/tags/nettbutikk">series Nettbutikk Team&#39;s Experiences and Experiments</a></em></p>
<p>Handling dependencies is one of important challenges in any software project -
and especially in the fast-moving JavaScript world. Our
<a href="nettbutikk.netcom.no">Nettbutikk</a> team just had a heated discussion about
handling upgrades of our dependencies that continuous our learning journey lined
with failures (or rather &quot;experiments that generated new knowledge&quot; :-)).</p>
<h2 id="failed-attempt-one-let-tools-do-it">Failed attempt one: Let tools do it</h2>
<p>Originally we let <code>npm</code> automatically
do minor upgrades but that turned out to be problematic as even minor version
changes can introduce bugs and having potentially different (minor) versions on
our different machines and in production makes troubleshooting difficult.</p>
<p>Also, this only takes care about minor version changes. When we decided to do
the bigger updates, we had a lot of work and testing to do, making sure all the
new versions work together. Troubleshooting of upgrade problems was difficult
since many libraries were changed at once so pinpointing the source of a new
defect was nontrivial.</p>
<h2 id="failed-attempt-two-let-a-human-do-it">Failed attempt two: Let a human do it</h2>
<p>Next we decided to freeze the library versions completely and let the one of us
that had the operations role that week run <code>npm outdated</code>, update all
dependencies, and verify everything still worked.</p>
<p>Thus we ensured that we were almost always up-to-date and that we typically had
only a small job to do, with just a small potential for problems. However it
wasn&#39;t frictionless either. It might require one or few hours (for proper
testing and occasional troubleshooting) every week, a time we would have rather
used on creating new value. And sometimes the upgrade did introduce problems -
some spot and fixed immediately, but some taking more time to discover and fix.
Once it took two weeks to find out that something broke due to a <code>Reflux</code> upgrade -
and finding out that the cause was the upgrade wasn&#39;t easy.</p>
<h2 id="new-experiment-upgrade-as-needed">New experiment: Upgrade as-needed</h2>
<p>Our reliable though-challenger Alex pointed out that upgrades give us typically
little value at a relatively high cost. So we have decided to try not upgrading
libraries unless we would have a good reason to do it (such as a known security
problem or a new functionality we want). It is obviously not optimal and the
upgrades might be big and painful but we will try it for a while and evaluate
how it works for us.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Handling and upgrading dependencies is difficult and costly. It&#39;s important to
evaluate the cost-benefit ration and experiment to find the &quot;least bad&quot; approach and
balance for a particular team. Development is fun.</p>
]]></description><link>http://teliasonera.github.io/blog/upgrade-or-not-to-upgrade-the-eternal-dilemma</link><guid isPermaLink="true">http://teliasonera.github.io/blog/upgrade-or-not-to-upgrade-the-eternal-dilemma</guid><dc:creator><![CDATA[Jakub Holý]]></dc:creator><pubDate>Tue, 20 Oct 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Afternoon-hack]]></title><description><![CDATA[<p>A few thursdays ago we arranged our very first hack day at TeliaSonera. The event was attended by 15 people, forming 5 different teams. Snacks and drinks were on the house. Pizza was served to the hungry late stayers. But most importantly: During the day we saw many good ideas shape up and worked on. A passionate group worked hard throughout the day. Some working on internal tools, other groups on customer facing products and new concepts. The results were presented at 9 AM the morning after. And after a vote later in the afternoon, we could announce two &quot;winners&quot;. The attendees reported back that they really enjoyed our afternoon-hack event, so we will definitely do more of that in the future.</p>
<blockquote>
  <p>
    I have not failed. I&#39;ve just found 10,000 ways that won&#39;t work.
  </p>
  <footer><cite title="Thomas A. Edison">Thomas A. Edison</cite></footer>
</blockquote>

<h3 id="why-are-we-doing-it-">Why are we doing it?</h3>
<p>First and foremost: To learn! If TS is going to stay competetive in the Telco market, then we need to learn faster than our competitors. We know we need to find new products and services to attract new customers and retain those that we already have. To do that we think we need to do at least 2 things:</p>
<ul>
<li>Create an environment where experimentation and learning can happen</li>
<li>Run experiments</li>
</ul>
<p>In a hectic work day it is not realistic to think that people will be able to create time and space to innovate. At least not in the short run. Thus, we need to change the envioronment.  Our hypothesis was that a hack day (or a half hack day), could be such a learning environment. After the first experiment we still believe that, but we need to run more experiments to  further improve. Other reasons to arrange a hack day:</p>
<ul>
<li>Have fun</li>
<li>Learn new skills</li>
<li>Get to know colleagues, also from other departments</li>
</ul>
<p>Although having fun and learning new skills is obviously very important (we believe in creating a work place where people can have fun), I want to especially emphasize the importance of the last point above. We believe that events like these can be a really great way to <strong>tear down some of the functional silos that exists in the organization</strong>, to create new relationships across departments. The first time around we had a few from the business side. Next time around we hope to get more people from lots of differents departments to attend: More people from the business side, marketing, sales, HR and so on. </p>
<h3 id="what-is-a-hack-day-">What is a Hack day?</h3>
<p>A hack day is a timeboxed event where people meet to work on ideas they have for a new product, play around with new technology, together with other people. This creates an environment where people can focus on developing an idea they have without all the interferences that people normally have in their daily job. </p>
<h3 id="start-small-ship-it-and-improve">Start small, ship it and improve</h3>
<blockquote>
  <p>
    The only purpose of starting is to finish, and while the projects we do are never really finished, they must ship.<br>  </p>
  <footer><cite title="Seth Godin">Seth Godin</cite></footer>
</blockquote>

<p>Thinking small enough can be really difficult, but we believe it to be incredibly important. So we wanted to take this approach when launching hack day. A hack day normally lasts a full day, from morning to afternoon/evening. To start small we decided that our first experiment should be a bit shorter, starting from lunch and lasting to whenever people needed to leave. Starting with a short event made it not only easier for people to attend. It also felt like a safe-to-fail experiment, where we could test out the concept and learn (see &quot;What we learned&quot; below). </p>
<h3 id="show-us-what-you-ve-learned">Show us what you&#39;ve learned</h3>
<p>Teams were challenged to present their hacks on the morning after, at 9AM. To keep things transparent and simple we decided to do the presentations in the open office space. Quite a few people got interested in what was going, and with some good presentations being made we managed to raise additional interest in our afternoon hack day. Next time we hope to have even more people joining. People has already started asking when our next event will take place. </p>
<p>In the afternoon we invited everybody to vote for two winners; best customer facing product and best internal product. No fancy prizes, just the honors.</p>
<p><img src="/images/hack-day-presentation-1.jpg" alt="Presentation of hacks"></p>
<h3 id="what-we-learned-from-arranging-the-event-">What we learned from arranging the event?</h3>
<p>We tried hard to keep our first event as simple as possible. That approach worked really well. The table below summarizes our key learnings from the event, tools and other learnings.</p>
<table>
<thead>
<tr>
<th style="text-align:left">What</th>
<th style="text-align:left">How</th>
<th style="text-align:center">Did it work?</th>
<th style="text-align:left">Learning</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Communication</td>
<td style="text-align:left"><a href="http://slack.com">Slack</a></td>
<td style="text-align:center">Yes</td>
<td style="text-align:left">Slack is awesome</td>
</tr>
<tr>
<td style="text-align:left">Idea gathering</td>
<td style="text-align:left"><a href="http://trello.com">Trello</a></td>
<td style="text-align:center">Yes</td>
<td style="text-align:left">Invite broadly to get more ideas</td>
</tr>
<tr>
<td style="text-align:left">Voting</td>
<td style="text-align:left"><a href="http://trello.com">Trello</a></td>
<td style="text-align:center">Yes</td>
<td style="text-align:left">You need Trello gold to enable voting</td>
</tr>
<tr>
<td style="text-align:left">Registration</td>
<td style="text-align:left"><a href="http://eventbrite.com">Eventbrite</a></td>
<td style="text-align:center">No</td>
<td style="text-align:left">Complicating things</td>
</tr>
<tr>
<td style="text-align:left">Presentation</td>
<td style="text-align:left">In open office area</td>
<td style="text-align:center">Yes</td>
<td style="text-align:left">Transparency is king</td>
</tr>
</tbody>
</table>
<p>Since we decided to do a shorter hack day for our first experiment, we accepted that teams presented concepts as hacks. In fact, the two winning teams did not have a potentially shippable product. Next time around, if we are doing a full hack day, we will focus more on getting some minimum products finished. </p>
]]></description><link>http://teliasonera.github.io/blog/afternoon-hack</link><guid isPermaLink="true">http://teliasonera.github.io/blog/afternoon-hack</guid><dc:creator><![CDATA[Ketil Jensen]]></dc:creator><pubDate>Mon, 19 Oct 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[No title]]></title><description><![CDATA[<ul>
<li>Don&#39;t follow a methodology - lead, explore, learn</li>
<li>No retro - ongoing process improvement</li>
<li>Minimal standup (link)</li>
<li>phys board<ul>
<li>Current + week milestone + KPIs</li>
<li>Two lanes</li>
<li>No done</li>
</ul>
</li>
<li>occasional planning</li>
<li>biz sitting with devs, talking constantly</li>
<li>no demos</li>
<li>release anytime</li>
</ul>
<h2 id="values">Values</h2>
<ul>
<li>Challenge established practices and truths - especially our own</li>
<li>Minimalism - process, lib/tool skepticism </li>
</ul>
]]></description><link>http://teliasonera.github.io/posts/post-7-process</link><guid isPermaLink="true">http://teliasonera.github.io/posts/post-7-process</guid></item></channel></rss>