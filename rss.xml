<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[TeliaSonera TechBlog]]></title><description><![CDATA[TeliaSonera TechBlog]]></description><link>http://teliasonera.github.io/tech-blog</link><generator>metalsmith-feed</generator><lastBuildDate>Sun, 01 Nov 2015 13:59:55 GMT</lastBuildDate><atom:link href="http://teliasonera.github.io/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Introducing the Series Nettbutikk Team's Experiences and Experiments]]></title><description><![CDATA[<p><em>A part of the series Nettbutikk Team&#39;s Experiences and Experiments</em></p>
<p>We are starting a new blog series tracking the experiences and (process)
experiments of the team behind <a href="https://nettbutikk.netcom.no">nettbutikk.netcom.no</a>.
This is the best product development process and team I have ever been to and
it has been called &quot;extreme&quot; for couple of reasons. We are quite excited about it
and would like to share our experiences, successes, and failures for the amusement
and inspiration of our readers.</p>
<p>When asked why we think this team and product development were so great, this
was my answer:</p>
<blockquote>
<p>Full stack &amp; full control: frontend, backend, ops. Great people &amp; ideally
small team. Very pragmatic, minimalistic and evolutionary approach to the
dev process. Working closely with the business and seeing the app actually
matters to them and influences real people every day.</p>
</blockquote>
<h2 id="what-is-the-project-about-">What is the project about?</h2>
<p>The project started as an experiment. It grew out of the pain with the old
huge and inflexible webshop rented from a third party. The business wanted
something that would fit their needs, that could evolve, enable them to experiment.
Something, where the time from an idea to production would be days or hours, not
months.</p>
<p>So they have decided to get a small team of highly skilled developers, sitting
and working together with the business, and write their own, better webshop.
The hypothesis was that even with expensive skilled Norwegian developers, it
would pay off thanks to more satisfied customers that would more easily find
what they wanted.</p>
<h2 id="why-is-considered-extreme-">Why is considered &quot;extreme&quot;?</h2>
<p>There multiple things considered &quot;extreme&quot; about this team. We have released to
production, to real customers, only in a few weeks, including just a single
product page. We deploy whenever we want to, and do our own operations, using
the cloud instead of the enterprise infrastructure. Our development process is
minimalistic, we don&#39;t follow a methodology, we create (and re-create) our own,
using only a physical Kanban board instead of Jira. And we run on Node.js instead
of the standard JVM. We have ditched e-mail and started using Slack instead.</p>
<h2 id="a-little-of-history">A little of history</h2>
<p>The project started in February 2015 as an experiment. The first release - a
single page for one variant of one phone - came after 7 weeks (though the
optimists hoped for 2). Then it steadily grew and a month ahead of the planned
experiment end it was deemed successful. By summer, the whole webshop with the
exception of checkout was in the new system, and it was better and more
performant then the old one. That enabled a large re-design for a summer campaign.
The business started with A/B experiments and there was a steady flow of new
features and improvements, with focus shifting gradually towards implementing
checkout directly in the new webshop. When the newest iPhone arrived, the system
handled the increased load formidably (contrary to some backend systems, sadly).</p>
<h2 id="meet-the-team">Meet the team</h2>
<p>The core team that started the journey consists of:</p>
<ul>
<li>Alex York, master of all things CSS and JS with a .Net background, love of TDD,
  and ultimate judge of code quality and understandability</li>
<li>Jakob Lind, the get-things-done guy, an Emacs and functional programming fanboy,
  always on lookout for better ways to do things</li>
<li>Jakub Holý, the operations and data specialist and Clojre(Script) evangelist</li>
<li>Ketil Jensen, our &quot;agile coach,&quot; and a shield and liaison between us and the rest of the organization</li>
<li>Magnus Indregård, our primary business representative</li>
</ul>
<p>All of the developers are very capable, they all are very pragmatic and favour
the lean way. Yet they have different background and approaches. The similarities
give us a strong push towards minimalism and getting stuff out, while the
differences spark valuable discussions and lead to a much better process and code.</p>
]]></description><link>http://teliasonera.github.io/blog/introducing-the-series-nettbutikk-team-s-experiences-and-experiments</link><guid isPermaLink="true">http://teliasonera.github.io/blog/introducing-the-series-nettbutikk-team-s-experiences-and-experiments</guid><dc:creator><![CDATA[Jakub Holý]]></dc:creator><pubDate>Sun, 01 Nov 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Upgrade or not to upgrade? The eternal dilemma]]></title><description><![CDATA[<p><em>A part of the series Nettbutikk Team&#39;s Experiences and Experiments</em></p>
<p>Handling dependencies is one of important challenges in any software project -
and especially in the fast-moving JavaScript world. Our
<a href="nettbutikk.netcom.no">Nettbutikk</a> team just had a heated discussion about
handling upgrades of our dependencies that continuous our learning journey lined
with failures (or rather &quot;experiments that generated new knowledge&quot; :-)).</p>
<h2 id="failed-attempt-one-let-tools-do-it">Failed attempt one: Let tools do it</h2>
<p>Originally we let <code>npm</code> automatically
do minor upgrades but that turned out to be problematic as even minor version
changes can introduce bugs and having potentially different (minor) versions on
our different machines and in production makes troubleshooting difficult.</p>
<p>Also, this only takes care about minor version changes. When we decided to do
the bigger updates, we had a lot of work and testing to do, making sure all the
new versions work together. Troubleshooting of upgrade problems was difficult
since many libraries were changed at once so pinpointing the source of a new
defect was nontrivial.</p>
<h2 id="failed-attempt-two-let-a-human-do-it">Failed attempt two: Let a human do it</h2>
<p>Next we decided to freeze the library versions completely and let the one of us
that had the operations role that week run <code>npm outdated</code>, update all
dependencies, and verify everything still worked.</p>
<p>Thus we ensured that we were almost always up-to-date and that we typically had
only a small job to do, with just a small potential for problems. However it
wasn&#39;t frictionless either. It might require one or few hours (for proper
testing and occasional troubleshooting) every week, a time we would have rather
used on creating new value. And sometimes the upgrade did introduce problems -
some spot and fixed immediately, but some taking more time to discover and fix.
Once it took two weeks to find out that something broke due to a <code>Reflux</code> upgrade -
and finding out that the cause was the upgrade wasn&#39;t easy.</p>
<h2 id="new-experiment-upgrade-as-needed">New experiment: Upgrade as-needed</h2>
<p>Our reliable though-challenger Alex pointed out that upgrades give us typically
little value at a relatively high cost. So we have decided to try not upgrading
libraries unless we would have a good reason to do it (such as a known security
problem or a new functionality we want). It is obviously not optimal and the
upgrades might be big and painful but we will try it for a while and evaluate
how it works for us.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Handling and upgrading dependencies is difficult and costly. It&#39;s important to
evaluate the cost-benefit ration and experiment to find the &quot;least bad&quot; approach and
balance for a particular team. Development is fun.</p>
]]></description><link>http://teliasonera.github.io/blog/upgrade-or-not-to-upgrade-the-eternal-dilemma</link><guid isPermaLink="true">http://teliasonera.github.io/blog/upgrade-or-not-to-upgrade-the-eternal-dilemma</guid><dc:creator><![CDATA[Jakub Holý]]></dc:creator><pubDate>Tue, 20 Oct 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Afternoon-hack]]></title><description><![CDATA[<p>A few thursdays ago we arranged our very first hack day at TeliaSonera. The event was attended by 15 people, forming 5 different teams. Snacks and drinks were on the house. Pizza was served to the hungry late stayers. But most importantly: During the day we saw many good ideas shape up and worked on. A passionate group worked hard throughout the day. Some working on internal tools, other groups on customer facing products and new concepts. The results were presented at 9 AM the morning after. And after a vote later in the afternoon, we could announce two &quot;winners&quot;. The attendees reported back that they really enjoyed our afternoon-hack event, so we will definitely do more of that in the future.</p>
<blockquote>
  <p>
    I have not failed. I&#39;ve just found 10,000 ways that won&#39;t work.
  </p>
  <footer><cite title="Thomas A. Edison">Thomas A. Edison</cite></footer>
</blockquote>

<h3 id="why-are-we-doing-it-">Why are we doing it?</h3>
<p>First and foremost: To learn! If TS is going to stay competetive in the Telco market, then we need to learn faster than our competitors. We know we need to find new products and services to attract new customers and retain those that we already have. To do that we think we need to do at least 2 things:</p>
<ul>
<li>Create an environment where experimentation and learning can happen</li>
<li>Run experiments</li>
</ul>
<p>In a hectic work day it is not realistic to think that people will be able to create time and space to innovate. At least not in the short run. Thus, we need to change the envioronment.  Our hypothesis was that a hack day (or a half hack day), could be such a learning environment. After the first experiment we still believe that, but we need to run more experiments to  further improve. Other reasons to arrange a hack day:</p>
<ul>
<li>Have fun</li>
<li>Learn new skills</li>
<li>Get to know colleagues, also from other departments</li>
</ul>
<p>Although having fun and learning new skills is obviously very important (we believe in creating a work place where people can have fun), I want to especially emphasize the importance of the last point above. We believe that events like these can be a really great way to <strong>tear down some of the functional silos that exists in the organization</strong>, to create new relationships across departments. The first time around we had a few from the business side. Next time around we hope to get more people from lots of differents departments to attend: More people from the business side, marketing, sales, HR and so on. </p>
<h3 id="what-is-a-hack-day-">What is a Hack day?</h3>
<p>A hack day is a timeboxed event where people meet to work on ideas they have for a new product, play around with new technology, together with other people. This creates an environment where people can focus on developing an idea they have without all the interferences that people normally have in their daily job. </p>
<h3 id="start-small-ship-it-and-improve">Start small, ship it and improve</h3>
<blockquote>
  <p>
    The only purpose of starting is to finish, and while the projects we do are never really finished, they must ship.<br>  </p>
  <footer><cite title="Seth Godin">Seth Godin</cite></footer>
</blockquote>

<p>Thinking small enough can be really difficult, but we believe it to be incredibly important. So we wanted to take this approach when launching hack day. A hack day normally lasts a full day, from morning to afternoon/evening. To start small we decided that our first experiment should be a bit shorter, starting from lunch and lasting to whenever people needed to leave. Starting with a short event made it not only easier for people to attend. It also felt like a safe-to-fail experiment, where we could test out the concept and learn (see &quot;What we learned&quot; below). </p>
<h3 id="show-us-what-you-ve-learned">Show us what you&#39;ve learned</h3>
<p>Teams were challenged to present their hacks on the morning after, at 9AM. To keep things transparent and simple we decided to do the presentations in the open office space. Quite a few people got interested in what was going, and with some good presentations being made we managed to raise additional interest in our afternoon hack day. Next time we hope to have even more people joining. People has already started asking when our next event will take place. </p>
<p>In the afternoon we invited everybody to vote for two winners; best customer facing product and best internal product. No fancy prizes, just the honors.</p>
<p><img src="/tech-blog/images/hack-day-presentation-1.jpg" alt="Presentation of hacks"></p>
<h3 id="what-we-learned-from-arranging-the-event-">What we learned from arranging the event?</h3>
<p>We tried hard to keep our first event as simple as possible. That approach worked really well. The table below summarizes our key learnings from the event, tools and other learnings.</p>
<table>
<thead>
<tr>
<th style="text-align:left">What</th>
<th style="text-align:left">How</th>
<th style="text-align:center">Did it work?</th>
<th style="text-align:left">Learning</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Communication</td>
<td style="text-align:left"><a href="http://slack.com">Slack</a></td>
<td style="text-align:center">Yes</td>
<td style="text-align:left">Slack is awesome</td>
</tr>
<tr>
<td style="text-align:left">Idea gathering</td>
<td style="text-align:left"><a href="http://trello.com">Trello</a></td>
<td style="text-align:center">Yes</td>
<td style="text-align:left">Invite broadly to get more ideas</td>
</tr>
<tr>
<td style="text-align:left">Voting</td>
<td style="text-align:left"><a href="http://trello.com">Trello</a></td>
<td style="text-align:center">Yes</td>
<td style="text-align:left">You need Trello gold to enable voting</td>
</tr>
<tr>
<td style="text-align:left">Registration</td>
<td style="text-align:left"><a href="http://eventbrite.com">Eventbrite</a></td>
<td style="text-align:center">No</td>
<td style="text-align:left">Complicating things</td>
</tr>
<tr>
<td style="text-align:left">Presentation</td>
<td style="text-align:left">In open office area</td>
<td style="text-align:center">Yes</td>
<td style="text-align:left">Transparency is king</td>
</tr>
</tbody>
</table>
<p>Since we decided to do a shorter hack day for our first experiment, we accepted that teams presented concepts as hacks. In fact, the two winning teams did not have a potentially shippable product. Next time around, if we are doing a full hack day, we will focus more on getting some minimum products finished. </p>
]]></description><link>http://teliasonera.github.io/blog/afternoon-hack</link><guid isPermaLink="true">http://teliasonera.github.io/blog/afternoon-hack</guid><dc:creator><![CDATA[Ketil Jensen]]></dc:creator><pubDate>Mon, 19 Oct 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[No title]]></title><description><![CDATA[<p><em>A part of the series Nettbutikk Team&#39;s Experiences and Experiments</em></p>
<p>The Nettbutikk team likes to challenge all established truths. Jakob Lind has
come with with an excellent question: do we need standups? Do we all need to
stand in front of our Kanban board and discuss what was and will be, especially
since we often already know that, thanks to communication all the time?</p>
<p>We have agreed to keep the standups but to limit hem to:</p>
<ol>
<li>A brief review of what has been deployed to production the previous day</li>
<li>Any blockers, problems, and requests for help</li>
</ol>
<p>i.e. skipping the reporting of the status of tasks if they progress &quot;according
to the plan&quot; and there is nothing noteworthy about them. Of course participants
can ask, if they want to know. And they should do so, if they f.ex. feel a task is
taking too long.</p>
<p>Minimalism for the win!</p>
]]></description><link>http://teliasonera.github.io/posts/post-4</link><guid isPermaLink="true">http://teliasonera.github.io/posts/post-4</guid></item></channel></rss>